const chai = require('chai');

const assert = chai.assert;

const BombSweeper = require('../lib/bombsweeper.js');

describe('BombSweeper', () => {
  describe('#Create2DArray', () => {
    const width = 15;
    const height = 10;
    let testGrid;

    beforeEach(() => {
      testGrid = BombSweeper.Create2DArray(width, height, '*');
    });

    it(`grid height should equal ${height}`, () => {
      assert.equal(testGrid.length, height);
    });

    it(`grid width should equal ${width}`, () => {
      assert.equal(testGrid[0].length, width);
    });

    it(`grid should contain ${width * height} stars`, () => {
      const totalStarCount = testGrid.reduce((starCount, row) => starCount + row.reduce((rowStarCount, cell) => rowStarCount + (cell === '*' ? 1 : 0), 0), 0);

      assert.equal(totalStarCount, width * height);
    });
  });

  describe('#PlaceBomb', () => {
    let bombsweeper;

    beforeEach(() => {
      bombsweeper = new BombSweeper(3, 3);
      bombsweeper.PlaceBomb(1, 1);
    });

    it('first bomb placed correctly', () => {
      assert.equal(bombsweeper.board.map(row => row.join('')).join(''), '1111*1111');
    });

    it('place bomb on top should return false and not adjust the board', () => {
      const result = bombsweeper.PlaceBomb(1, 1);

      assert.equal(bombsweeper.board.map(row => row.join('')).join(''), '1111*1111');
      assert.equal(result, false);
    });

    it('place bomb on top shouldn\'t increment adjacent cells', () => {
      bombsweeper.PlaceBomb(1, 1);
      assert.equal(bombsweeper.board.map(row => row.join('')).join(''), '1111*1111');
    });

    it('increment non-zero adjacent cells', () => {
      bombsweeper.PlaceBomb(0, 0);
      assert.equal(bombsweeper.board.map(row => row.join('')).join(''), '*212*1111');
    });
  });

  describe('#PlaceBombs', () => {
    let bombsweeper;

    beforeEach(() => {
      bombsweeper = new BombSweeper(15, 10);
      bombsweeper.PlaceBombs(15);
    });

    it('all bombs have been placed', () => {
      let bombCount = 0;

      bombsweeper.board.forEach((row) => {
        row.forEach((cell) => {
          if (cell === '*') {
            bombCount += 1;
          }
        });
      });

      assert.equal(bombCount, 15);
    });

    it('all adjacent counts are correct', () => {
      bombsweeper.board.forEach((row, y) => {
        row.forEach((cell, x) => {
          if (cell !== '*') {
            let adjacentBombs = 0;

            const width = bombsweeper.width;
            const height = bombsweeper.height;
            const validOffsets = BombSweeper.GetAdjacentCellOffsets()
              .map(offset => ({ x: offset.x + x, y: offset.y + y }))
              .filter(os => BombSweeper.CoordInBounds(os.x, os.y, width, height));

            validOffsets.forEach((offset) => {
              if (bombsweeper.board[offset.y][offset.x] === '*') {
                adjacentBombs += 1;
              }
            });

            assert.equal(adjacentBombs, cell);
          }
        });
      });
    });

    it('should fill the board when count > area', () => {
      bombsweeper.PlaceBombs(300);

      assert.equal(bombsweeper.bombCount, 150);
      // todo: assert.equal(bombsweeper.join(...), ''.padStart(150, '*'));
    });
  });

  describe('#CheckCell', () => {
    let bombsweeper;

    beforeEach(() => {
      bombsweeper = new BombSweeper(3, 3);
      bombsweeper.PlaceBomb(0, 0);
    });

    it('should flood fill if zero is selected', () => {
      bombsweeper.CheckCell(2, 2);
      assert.equal(bombsweeper.mask.join(','), 'false,true,true,true,true,true,true,true,true');
    });

    it('should only uncover single numbers', () => {
      bombsweeper.CheckCell(1, 1);
      assert.equal(bombsweeper.mask.join(','), 'false,false,false,false,true,false,false,false,false');
    });

    it('should lose if a bomb is uncovered', (done) => {
      bombsweeper.onLoss = function onLoss() {
        done();
      };

      bombsweeper.CheckCell(0, 0);
    });

    it('should win if only bombs are left', (done) => {
      bombsweeper.onWin = function onWin() {
        done();
      };

      bombsweeper.CheckCell(2, 2);
    });
  });
});

